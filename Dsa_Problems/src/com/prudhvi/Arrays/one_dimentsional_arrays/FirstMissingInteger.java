package com.prudhvi.Arrays.one_dimentsional_arrays;

import java.util.Arrays;

public class FirstMissingInteger {

	public static void main(String[] args) {
		//int[] A= {417,929,845,462,675,175,73,867,14,201,777,407,80,882,785,563,209,261,776,362,730,74,649,465,353,801,503,154,998,286,520,692,68,805,835,210,819,341,564,215,984,643,381,793,726,213,866,706,97,538,308,797,883,59,328,743,694,607,729,821,32,672,130,13,76,724,384,444,884,192,917,75,551,96,418,840,235,433,290,954,549,950,21,711,781,132,296,44,439,164,401,505,923,136,317,548,787,224,23,185,6,350,822,457,489,133,31,830,386,671,999,255,222,944,952,637,523,494,916,95,734,908,90,541,470,941,876,264,880,761,535,738,128,772,39,553,656,603,868,292,117,966,259,619,836,818,493,592,380,500,599,839,268,67,591,126,773,635,800,842,536,668,896,260,664,506,280,435,618,398,533,647,373,713,745,478,129,844,640,886,972,62,636,79,600,263,52,719,665,376,351,623,276,66,316,813,663,831,160,237,567,928,543,508,638,487,234,997,307,480,620,890,216,147,271,989,872,994,488,291,331,8,769,481,924,166,89,824,-4,590,416,17,814,728,18,673,662,410,727,667,631,660,625,683,33,436,930,91,141,948,138,113,253,56,432,744,302,211,262,968,945,396,240,594,684,958,343,879,155,395,288,550,482,557,826,598,795,914,892,690,964,981,150,179,515,205,265,823,799,190,236,24,498,229,420,753,936,191,366,935,434,311,920,167,817,220,219,741,-2,674,330,909,162,443,412,974,294,864,971,760,225,681,689,608,931,427,687,466,894,303,390,242,339,252,20,218,499,232,184,490,4,957,597,477,354,677,691,25,580,897,542,186,359,346,409,655,979,853,411,344,358,559,765,383,484,181,82,514,582,593,77,228,921,348,453,274,449,106,657,783,782,811,333,305,784,581,746,858,249,479,652,270,429,614,903,102,378,575,119,196,12,990,356,277,169,70,518,282,676,137,622,616,357,913,161,3,589,327};
		int[] A= {699,2,690,936,319,784,562,35,151,698,126,730,587,157,201,761,956,359,198,986,915,7,703,324,814,382,294,204,120,731,615,330,486,52,223,376,649,458,564,971,72,605,177,20,461,790,872,363,916,435,991,184,410,320,16,480,768,801,117,338,650,786,17,369,979,304,445,688,862,229,311,351,985,697,135,299,310,3,643,221,831,196,887,679,484,209,824,292,588,721,140,675,827,913,271,170,812,552,334,860,981,550,308,584,442,328,251,456,976,31,507,954,982,742,45,727,794,309,527,623,56,843,436,681,143,130,689,870,362,580,560,474,385,525,881,51,890,917,820,826,139,443,978,144,512,205,682,188,344,429,497,181,749,864,664,145,621,629,886,572,89,725,945,29,553,977,783,590,236,728,125,90,492,261,543,259,662,622,285,392,561,670,200,504,246,513,910,583,460,179,207,709,127,926,816,426,520,174,464,883,780,5,268,606,1,109,704,391,661,924,516,241,477,952,405,522,247,335,356,839,423,779,4,43,720,238,965,951,914,10,496,775,651,788,373,491,746,799,518,93,86,774,652,955,494,252,781,946,412,202,741,719,612,673,896,1000,289,554,69,424,980,506,593,889,25,959,28,736,8,969,865,657,567,434,9,167,357,929,645,250,565,94,928,473,509,823,313,762,-1,208,903,922,655,948,326,485,150,73,505,225,122,129,648,838,811,972,735,78,428,740,782,632,316,440,737,297,873,281,479,654,0,633,212,152,154,470,866,79,722,958,732,900,832,278,58,842,745,540,169,347,592,438,882,462,53,34,519,489,85,757,919,701,15,211,667,637,74,573,240,559,-2,472,203,112,162,776,-4,155,837,99,98,64,101,983,366,853,970,482,40,921,374,758,413,339,705,771,360,734,282,219,766,535,133,532,254};
		//int[] A= {3,4,-1,1};
		
		
        System.out.print(solve(A));
        
	}
	public static int solve(int[] A) {
		for(int i=0;i<A.length;i++){
            while(A[i]!=i+1 && A[i]<=A.length && A[i]>0 && A[i]!=A[A[i]-1]){
            	System.out.println("i: "+i+" A[i]: "+A[i]+" i+1: "+(i+1)+" A[i]!=A[A[i]-1]: "+A[A[i]-1]);
               if(A[A[i]-1]<0) {
            	   
               }
               int temp=A[A[i]-1];
               A[A[i]-1] =A[i];
               A[i]=temp;
               System.out.println(Arrays.toString(A));
            }
        }
		System.out.println(Arrays.toString(A));
        for(int i=0;i<A.length;i++){
            if(A[i]!=i+1){
                return i+1;
            }
        }
        return A.length+1;
       
		
	}

}
