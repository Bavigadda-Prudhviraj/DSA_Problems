package com.prudhvi.queue;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class NIntegersContainingOnly123 {
	/*
	Problem Description
		Given an integer, A. Find and Return first positive A integers in ascending order containing only digits 1, 2, and 3.
		NOTE: All the A integers will fit in 32-bit integers.
	Problem Constraints
		1 <= A <= 29500
	Input Format
		The only argument given is integer A.
	Output Format
		Return an integer array denoting the first positive A integers in ascending order containing only digits 1, 2 and 3.
	 */
	public static void main(String[] args) {
		int num=10;
		ArrayList<Integer> answerArrayList=nPerfectNumbersWith123(num);
		System.out.println(answerArrayList);
	}
	/*
	The nPerfectNumbersWith123 method generates a list of n perfect numbers with digits 1, 2, and 3 only. 
	A perfect number is a number that contains only the digits 1, 2, and 3. 
	The method uses a Queue to generate and store the perfect numbers.
	
	Time Complexity:
			The time complexity of the nPerfectNumbersWith123 method is O(n), where n is the input number. 
			The method performs n iterations in the for loop.
	
	Space Complexity:
			The space complexity of the method is also O(n), as it stores n perfect numbers in the perfectNumberArrayList. 
			Additionally, the queue stores at most 3 elements per iteration during the loop, which does not contribute significantly to the space complexity.
	 */
	private static ArrayList<Integer> nPerfectNumbersWith123(int num) {
		//Creates an ArrayList to store the generated perfect numbers.
		ArrayList<Integer> perfectNumberArrayList=new ArrayList<>();
		//Creates a Queue (LinkedList implementation) to store and process the perfect numbers.
		Queue<Integer> queue=new LinkedList<>();
		queue.add(1);//Adds the number 1 to the queue as the starting point for generating perfect numbers.
		queue.add(2);//Adds the number 2 to the queue.
		queue.add(3);//Adds the number 3 to the queue.
		//The for loop runs n number of times, generating n number of perfect numbers. For each iteration:
		for(int i=0;i<num;i++) {
			//The front element of the queue (queueFrontNumber) is retrieved and removed using queue.poll().
			int queueFrontNumber=queue.poll();
			//The queueFrontNumber is added to the perfectNumberArrayList, representing a perfect number.
			perfectNumberArrayList.add(queueFrontNumber);
			//Three new numbers are generated by appending 1, 2, and 3 to the queueFrontNumber and added to the queue. 
			//For example, if queueFrontNumber is 1, then 11, 12, and 13 are added to the queue. 
			//If queueFrontNumber is 2, then 21, 22, and 23 are added to the queue. 
			//If queueFrontNumber is 3, then 31, 32, and 33 are added to the queue. 
			//This process continues for subsequent iterations.
			queue.add((queueFrontNumber*10)+1);
			queue.add((queueFrontNumber*10)+2);
			queue.add((queueFrontNumber*10)+3);
		}
		return perfectNumberArrayList;
	}

}
